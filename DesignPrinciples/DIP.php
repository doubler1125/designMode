<?php
class DIP{};
/**
 * 依赖倒置原则 (Dependence Inversion Principle, DIP)
 *
 * 含义：高层模块不应该依赖底层模块。两个都应该依赖抽象。
 *      抽象不应该依赖细节。细节应该依赖抽象。
 *     （更为精简的定义：就是面向抽象(抽象类或者接口)编程）
 *
 * 解释：就像电脑的CPU、内存、硬盘都是针对接口设计的，如果针对实现设计去依赖具体的主板，主板一坏，所有的部件就没用了；
 *      反过来如果内存坏了，也不应该造成其他部件不能用才对。
 *      高层模块和低层模块都应该针对接口或抽象类，这样都容易复用。除了约定的接口谁也不依赖谁。
 *
 * 补充：依赖倒置其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，
 *      即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之就是过程化的设计了。
 *
 * 使用：依赖倒置原则的本质就是通过抽象(抽象类或接口)使各个类或模块实现彼此独立，不互相影响，实现模块间的松耦合。
 *      在项目中使用这个规则需要以下原则：
 *      1、每个类尽量都要有接口或抽象类，或者抽象类和接口都有： 依赖倒置原则的基本要求，有抽象才能依赖倒置
 *      2、变量的表面类型尽量是接口或者抽象类
 *      3、任何类都不应该从具体类派生
 *      4、尽量不要重写基类已经写好的方法(里式替换原则)
 *      5、结合里式替换原则来使用： 结合里式替换原则和依赖倒置原则我们可以得出一个通俗的规则，
 *      接口负责定义public属性和方法，并且声明与其他对象的依赖关系，
 *      抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑，同时在适当的时候对父类进行细化。
 */