<?php
class CARP{};
/**
 * 合成/聚合复用原则（CARP）
 *
 * 含义：尽量使用合成/聚合，尽量不要使用类继承。
 *
 * 补充：聚合：聚合表示一种弱的'拥有'关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；
 *      合成：合成则是一种强的'拥有'关系，体现了严格的部分和整体的部分，部分和整体的生命周期一样。
 *      比方说，大雁有两个翅膀，翅膀与大雁是部分和整体的关系，并且它们的生命周期是相同的，于是大雁和翅膀就是合成关系。
 *      而大雁是群居动物，所以每只大雁都是属于一个雁群，一个雁群可以有多只大雁，所以大雁和雁群都是聚合关系。
 *
 * 优点：优先使用对象的合成/聚合将有助于你保持每个类被封装，并被集中在单个任务上。
 *      这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。
 */

/**
 * 比如说手机 有不同的手机品牌和手机软件，如果先从继承的角度去想了，手机品牌->手机品牌M->手机品牌M通讯录、手机品牌M游戏，从手机软件开始继承也是如此，
 * 得需要很多子类并且有紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。
 * 这里我们如果使用聚合，手机品牌->手机品牌M、手机品牌N，手机软件->通讯录、游戏，手机品牌父类包含手机软件父类就行，符合开放-封闭的原则，方便扩展了。
 *
 * 再举个例子：
 * 设想如果要绘制矩形、圆形、椭圆、正方形，我们至少需要4个形状类，但是如果绘制的图形需要具有不同的颜色，如红色、绿色、蓝色等，此时至少有如下两种设计方案：
 *  第一种设计方案是为每一种形状都提供一套各种颜色的版本。
 *  第二种设计方案是根据实际需要对形状和颜色进行组合
 * 对于有两个变化维度（即两个变化的原因）的系统，采用方案二来进行设计系统中类的个数更少，且系统扩展更为方便。设计方案二即是桥接模式的应用。
 *
 */