<?php

/**
 * <面向对象的设计模式>
 *
 * --创建型模式:
 *
 * 简单工厂 @see SimpleFactoryPattern 由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例
 * 工厂方法 @see FactoryMethodPattern 通过工厂子类来确定究竟应该实例化哪一个具体产品类，比简单工厂更符合开闭原则。
 * 抽象工厂 @see AbstractFactoryPattern 功能相关产品的创建。建造者模式返回一个组装好的完整产品 ，而抽象工厂模式返回一系列相关的产品。
 * 建造者  @see BuilderPattern 一步一步创建一个复杂的对象，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
 * 原型    @see PrototypePattern 使用克隆来生成对象。
 * 单例    @see SingletonPattern 生成一个且只生成一个对象实例的特殊类。
 *
 * 总结：在创建对象时，通常，设计是以使用工厂方法开始，当设计者发现需要更大的灵活性时，设计便会向抽象工厂、建造者、原型的设计演化。
 *
 * --结构型模式:
 *
 * 适配器 @see AdapterPattern 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
 * 桥接   @see BridgePattern 抽象化和实现化之间使用关联关系（组合或者聚合关系）而不是继承关系。[场景：两个独立变化维度的类可以将其分为抽象化和实现化两个角色]
 * 装饰   @see DefinitionPattern 动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。[场景：先执行人家的再接着执行自己的]
 * 外观   @see FacadePattern 外部与一个子系统的通信必须通过一个统一的外观对象进行。[场景：它多用于在多个子系统之间，作为中间层。用户通过Facade对象，直接请求工作，省去了用户调用多个子系统的复杂动作。]
 * 享元   @see FlyweightPattern 运用共享技术有效地支持大量细粒度对象的复用。[场景：维护一个享元池存储具有相同内部状态的享元对象来使用]
 * 代理   @see ProxyPattern 为其他对象提供一种代理以控制对这个对象的访问。
 * 组合   @see CompositePattern 将对象组合成树状结构以表示'部分-整体'的层次结构。组合模式是的用户对单个对象和组合对象的使用具有一致性。
 *
 * --行为型模式：
 *
 * 观察者  @see ObserverPattern 定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。
 * 模版方法 @see TemplateMethodPattern 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
 * 命令    @see CommandPattern 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。
 * 状态    @see StatePattern 当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。
 * 职责链  @see ChainOfResponsibility 使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
 * 解释器  @see InterpreterPattern 给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
 * 中介者  @see MediatorPattern 用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。
 * 访问者  @see VisitorPattern 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的前提下定义作用于这些元素的操作。
 * 策略   @see StrategyPattern 定义了一系列的算法，并将每一个算法封装起来，使每个算法可以相互替代，使算法本身和使用算法的客户端分割开来，相互独立。
 * 备忘录  @see MementoPattern 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。
 * 迭代器  @see IteratorPattern 提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。
 *
 *
 * <面向对象的设计原则>
 *
 * 依赖倒置   @see DIP 面向抽象(抽象类或者接口)编程
 * 开放-封闭原则 @see OCP 对于扩展是开放的，对于更改是封闭的
 * 迪米特法则 @see LoD 强调了类之间的松耦合
 * 里氏代替原则 @see LSP 子类型必须能够替换掉他们的父类型
 * 单一职责原则 @see SRP 一个类/接口/方法只负责一项职责或职能
 * 合成/聚合复用原则 @see CARP 尽量使用合成/聚合，尽量不要使用类继承
 */